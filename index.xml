<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Usman Mahmood</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>https://www.usman.me.uk/</link>
    <language>en-us</language>
    <author>Usman Mahmood</author>
    <copyright>2020 Usman Mahmood</copyright>
    <updated>Fri, 08 May 2020 13:13:23 BST</updated>
    
    
    <item>
      <title>Server-Sent Events (SSE) With Go</title>
      <link>https://www.usman.me.uk/2020/05/sse-go/</link>
      <pubDate>Fri, 08 May 2020 13:13:23 BST</pubDate>
      <author>Usman Mahmood</author>
      <guid>https://www.usman.me.uk/2020/05/sse-go/</guid>
      <description>

&lt;p&gt;Server-Sent Events (SSE) technology is best explained by this article on &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events&#34;&gt;MDN&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The EventSource interface is used to receive Server-Sent Events. It connects to a server over HTTP and receives events in text/event-stream format without closing the connection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The connection is persistent and communication is one-way, from the server to the client, the client cannot push data to the server. This is unlike WebSockets where communication is bi-directional.&lt;/p&gt;

&lt;p&gt;Some unique characteristics of SSE compared to WebSockets or long polling are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communication is one-way from server to client and read-only.&lt;/li&gt;
&lt;li&gt;Requests are regular HTTP requests.&lt;/li&gt;
&lt;li&gt;The client will attempt auto-reconnect if the connection drops.&lt;/li&gt;
&lt;li&gt;Event messages can contain id&amp;rsquo;s, so if a client connection drops. On reconnect, it can send the last id it saw, and the server can work out the number of messages the client has missed. And push those message to the client on reconnect.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is one important fact that you should understand about SSE when used over HTTP/1 and HTTP/2, from the MDN article above:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When not used over HTTP/2, SSE suffers from a limitation to the maximum number of open connections, which can be specially painful when opening various tabs as the limit is per browser and set to a very low number (6). The issue has been marked as &amp;ldquo;Won&amp;rsquo;t fix&amp;rdquo; in Chrome and Firefox. This limit is per browser + domain, so that means that you can open 6 SSE connections across all of the tabs to www.example1.com and another 6 SSE connections to www.example2.com. (from Stackoverflow). When using HTTP/2, the maximum number of simultaneous HTTP streams is negotiated between the server and the client (defaults to 100).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;sse-server&#34;&gt;SSE Server&lt;/h4&gt;

&lt;p&gt;Here is a basic example of an SSE server in Go using the &lt;em&gt;eventsource&lt;/em&gt; package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// sse_server.go
package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;strconv&amp;quot;
    &amp;quot;time&amp;quot;

    &amp;quot;github.com/bernerdschaefer/eventsource&amp;quot;
)

func main() {
    es := eventsource.Handler(func(lastID string, e *eventsource.Encoder, stop &amp;lt;-chan bool) {
        var id int64
        for {
            select {
            case &amp;lt;-time.After(3 * time.Second):
                fmt.Println(&amp;quot;sending event...&amp;quot;)
                id += 1
                e.Encode(eventsource.Event{ID: strconv.FormatInt(id, 10),
                    Type: &amp;quot;add&amp;quot;,
                    Data: []byte(&amp;quot;some data&amp;quot;)})
            case &amp;lt;-stop:
                return
            }
        }
    })
    http.HandleFunc(&amp;quot;/events&amp;quot;, func(w http.ResponseWriter, r *http.Request) {
        w.Header().Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;text/event-stream&amp;quot;)
        w.Header().Set(&amp;quot;Cache-Control&amp;quot;, &amp;quot;no-cache&amp;quot;)
        w.Header().Set(&amp;quot;Connection&amp;quot;, &amp;quot;keep-alive&amp;quot;)
        es.ServeHTTP(w, r)
    })
    if e := http.ListenAndServe(&amp;quot;:9090&amp;quot;, nil); e != nil {
        fmt.Println(e)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code sets up an endpoint &lt;em&gt;/events&lt;/em&gt; and pushes events to clients every three seconds.&lt;/p&gt;

&lt;p&gt;Start the server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go run sse_server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sse-client&#34;&gt;SSE Client&lt;/h4&gt;

&lt;p&gt;To view events pushed by the server, we will use the excellent &lt;a href=&#34;https://httpie.org/&#34;&gt;HTTPie&lt;/a&gt; tool:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ http --stream http://localhost:9090/events
HTTP/1.1 200 OK
Cache-Control: no-cache
Connection: keep-alive
Content-Type: text/event-stream
Transfer-Encoding: chunked
Vary: Accept

id: 1
event: add
data: some data

id: 2
event: add
data: some data

id: 3
event: add
data: some data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example using HTML/Javascript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Getting server updates&amp;lt;/h1&amp;gt;
    &amp;lt;div id=&amp;quot;result&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
      if(typeof(EventSource) !== &amp;quot;undefined&amp;quot;) {
        var source = new EventSource(&amp;quot;http://localhost:9090/events&amp;quot;);
        source.addEventListener(&amp;quot;add&amp;quot;, (message) =&amp;gt; {
                  console.log(message) 
                  document.getElementById(&#39;result&#39;).innerHTML += message.data + &amp;quot;&amp;lt;br&amp;gt;&amp;quot;; 
              }); 
      } else {
        document.getElementById(&amp;quot;result&amp;quot;).innerHTML = &amp;quot;Sorry, your browser does not support server-sent events...&amp;quot;;
      }
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the above code into file sse_client.html, and then open it in your web browser.&lt;/p&gt;

&lt;p&gt;you will see the event &amp;ldquo;some data&amp;rdquo; being output on the page, if you check the console you will see much more detailed information about the events:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;add { target: EventSource, isTrusted: true, data: &amp;quot;some data&amp;quot;, origin: &amp;quot;http://localhost:9090&amp;quot;, lastEventId: &amp;quot;1&amp;quot;, ports: Restricted, srcElement: EventSource, currentTarget: EventSource, eventPhase: 2, bubbles: false, â€¦ }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope you found this post helpful.&lt;/p&gt;

&lt;p&gt;Fin&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Secure Tunnels with WireGuard</title>
      <link>https://www.usman.me.uk/2020/03/wireguard/</link>
      <pubDate>Mon, 23 Mar 2020 22:11:03 &#43;0100</pubDate>
      <author>Usman Mahmood</author>
      <guid>https://www.usman.me.uk/2020/03/wireguard/</guid>
      <description>&lt;p&gt;Wireguard is a secure networking tunnel, it can be used for VPNs, connecting data centers together over the Internet, or any place where you need to connect two or more networks together in a secure way.&lt;/p&gt;

&lt;p&gt;Wireguard is open source and it is designed to be much simpler to configure than other tools such as OpenVPN or IPSec.&lt;/p&gt;

&lt;p&gt;Below, we are going to connect two computers together:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Machine A IP address 192.168.0.40
Machine B IP address 192.168.0.41
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, we need to install WireGuard on each machine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt install wireguard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you are on macOS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install wireguard-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On machine A and machine B run the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wg genkey | tee privatekey | wg pubkey &amp;gt; publickey
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will read privatekey from stdin and write the corresponding public key to publickey on stdout.&lt;/p&gt;

&lt;p&gt;On machine A create the configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nano wg0.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And enter the following configuration data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Interface]
Address    = 10.0.0.40/24
PrivateKey = &amp;lt; copy &amp;amp; paste machine A&#39;s private key &amp;gt;
ListenPort = 58891

[Peer]
PublicKey  = &amp;lt; copy &amp;amp; paste machine B&#39;s public key &amp;gt;
AllowedIPs = 10.0.0.41/32 
EndPoint   = 192.168.0.41:56991

# if behind firewall or NAT
PersistentKeepalive = 25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On machine B create the configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nano wg0.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And enter the following configuration data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Interface]
Address    = 10.0.0.41/24
PrivateKey = &amp;lt; copy &amp;amp; paste machine B&#39;s private key &amp;gt;
ListenPort = 56991

[Peer]
PublicKey  = &amp;lt; copy &amp;amp; paste machine A&#39;s public key &amp;gt;
AllowedIPs = 10.0.0.40/32 
EndPoint   = 192.168.0.40:58891

# if behind firewall or NAT
PersistentKeepalive = 25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To start WireGuard, on both machines run the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wg-quick up ./wg0.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On machine A run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ping 10.0.0.41
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On machine B run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ping 10.0.0.40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you see output from the ping commands, success! you now have two machines with a secure tunnel between them.&lt;/p&gt;

&lt;p&gt;To stop WireGuard, on both machines run the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wg-quick down ./wg0.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope this introduction to WireGuard helped you.&lt;/p&gt;

&lt;p&gt;Fin.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Configuring Remote Connections with PostgreSQL</title>
      <link>https://www.usman.me.uk/2020/02/conn-postgres/</link>
      <pubDate>Thu, 13 Feb 2020 19:15:15 &#43;0100</pubDate>
      <author>Usman Mahmood</author>
      <guid>https://www.usman.me.uk/2020/02/conn-postgres/</guid>
      <description>

&lt;p&gt;If you need to access your PostgreSQL database from another machine, you need to edit the configuration, to make the database listen to incoming connections from other hosts. Below are the steps on how to do this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Do not do this on your production database environment, It will open up a potential security flaw. This should be fine to do on your staging environment for testing purposes.&lt;/p&gt;

&lt;p&gt;On the machine running PostgreSQL, locate configuration file &lt;em&gt;postgres.conf:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ su - postgres
$ psql
$ SHOW config_file;
postgres=# SHOW config_file;
                   config_file
    ------------------------------------------
     /etc/postgresql/9.6/main/postgresql.conf
    (1 row)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nano /etc/postgresql/9.6/main/postgresql.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;listen_address = &amp;quot;localhost&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And append the machines IP address. So it looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;listen_address = &amp;quot;localhost, 192.168.0.40&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: you can get the machines IP address with &lt;em&gt;ifconfig -a&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now we need to edit the configuration file pg_hba.conf, you can locate the file with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ su - postgres
$ psql
$ SHOW hba_file;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nano /etc/postgresql/9.6/main/pg_hba.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;host    example    postgres    192.168.0.40/32    md5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now restart PostgreSQL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo service postgresql restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;testing&#34;&gt;Testing:&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s connect to our PostgreSQL database from another machine, using Python:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import psycopg2

# Connect to an existing database
conn = psycopg2.connect(&amp;quot;host=&#39;192.168.0.40&#39; dbname=&#39;test&#39; user=&#39;postgres&#39; password=&#39;password&#39;&amp;quot;)
cur  = conn.cursor()
cur.execute(&amp;quot;SELECT * FROM test;&amp;quot;)
...
cur.close()
conn.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fin&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Compiling OpenVPN on the Raspberry Pi 3</title>
      <link>https://www.usman.me.uk/2019/12/compile-openvpn/</link>
      <pubDate>Sun, 15 Dec 2019 14:41:12 &#43;0100</pubDate>
      <author>Usman Mahmood</author>
      <guid>https://www.usman.me.uk/2019/12/compile-openvpn/</guid>
      <description>&lt;p&gt;Recently I needed to upgrade the version of OpenVPN on my Raspberry Pi 3 Model B. Below are the steps needed to do this, here we upgrade to OpenVPN version 2.4.8.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /tmp
$ wget https://swupdate.openvpn.org/community/releases/openvpn-2.4.8.tar.gz
$ tar xf openvpn-2.4.8.tar.gz
$ cd openvpn-2.4.8/
$ sudo apt-get install libssl-dev
$ sudo apt-get install liblzo2-dev
$ sudo apt-get install libpam0g-dev
$ ./configure --prefix=/usr
$ sudo make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify that the new version installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openvpn --version
OpenVPN 2.4.8 armv7l-unknown-linux-gnueabihf 
[SSL (OpenSSL)] [LZO] [LZ4] [EPOLL] [MH/PKTINFO] [AEAD] built on May 28 2020
library versions: OpenSSL 1.1.1d  10 Sep 2019, LZO 2.10
Originally developed by James Yonan
Copyright (C) 2002-2018 OpenVPN Inc &amp;lt;sales@openvpn.net&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hope this helps.&lt;/p&gt;

&lt;p&gt;Fin.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Styling Markers on Mapbox Static Maps</title>
      <link>https://www.usman.me.uk/2019/10/styling-markers-mapbox/</link>
      <pubDate>Sat, 05 Oct 2019 16:12:46 BST</pubDate>
      <author>Usman Mahmood</author>
      <guid>https://www.usman.me.uk/2019/10/styling-markers-mapbox/</guid>
      <description>&lt;p&gt;Recently I was using the python map-box api to generate static maps. I needed to
style the markers which pin pointed locations on the map. I found it difficult to
find the necessary documentation on how to do this. In the end it simply involved
adding the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;maker-colour (hex value).&lt;/li&gt;
&lt;li&gt;marker-symbol (&lt;a href=&#34;https://labs.mapbox.com/maki-icons/&#34;&gt;Maki icon name&lt;/a&gt;. an integer, or a lowercase letter).&lt;/li&gt;
&lt;li&gt;marker-size (small, large).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To the JSON like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;origin = {
    &#39;type&#39;: &#39;Feature&#39;,
    &#39;properties&#39;: {
        &#39;name&#39;: &#39;Cambridge&#39;, 
        &#39;marker-color&#39;: &#39;#f600f6&#39;, 
        &#39;marker-symbol&#39;: &#39;c&#39;,
        &#39;marker-size&#39;: &#39;large&#39;,
        },
    &#39;geometry&#39;: {
        &#39;type&#39;: &#39;Point&#39;,
        &#39;coordinates&#39;: [0.1218,52.2053]
        },
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/S7y4KOX.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the full code sample:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mapbox import StaticStyle

location1 = {
    &#39;type&#39;: &#39;Feature&#39;,
    &#39;properties&#39;: {
        &#39;name&#39;: &#39;Cambridge&#39;, 
        &#39;marker-color&#39;: &#39;#f600f6&#39;, 
        &#39;marker-symbol&#39;: &#39;c&#39;,
        &#39;marker-size&#39;: &#39;large&#39;,
        },
    &#39;geometry&#39;: {
        &#39;type&#39;: &#39;Point&#39;,
        &#39;coordinates&#39;: [0.1218,52.2053]
        },
}
    
location2 = {
    &#39;type&#39;: &#39;Feature&#39;,
    &#39;properties&#39;: {
        &#39;name&#39;: &#39;Kings Cross London&#39;,
        &#39;marker-color&#39;: &#39;#26fae4&#39;,
        &#39;marker-symbol&#39;: &#39;k&#39;,
        &#39;marker-size&#39;: &#39;large&#39;,
        },
    &#39;geometry&#39;: {
        &#39;type&#39;: &#39;Point&#39;,
        &#39;coordinates&#39;: [-0.125250,51.544180]
        }
}

features = [location1, location2]
service  = StaticStyle()
response = service.image(username=&#39;mapbox&#39;, 
                         style_id=&#39;streets-v9&#39;, 
                         retina=True,
                         attribution=False, 
                         logo=False,
                         features=features)
    
with open(&#39;map.png&#39;, &#39;wb&#39;) as img:
    img.write(response.content)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Remember to the set the environment variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MAPBOX_ACCESS_TOKEN=&amp;quot;MY_ACCESS_TOKEN&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before you run your script, the environment variable is read by the mapbox library.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.mapbox.com/api/maps/#static&#34;&gt;Mapbox static maps documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fin.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Ignoring Directories When Backing up with Borg</title>
      <link>https://www.usman.me.uk/2018/09/borg-ignore/</link>
      <pubDate>Fri, 14 Sep 2018 20:36:32 UTC</pubDate>
      <author>Usman Mahmood</author>
      <guid>https://www.usman.me.uk/2018/09/borg-ignore/</guid>
      <description>&lt;p&gt;Borg backup has a &lt;code&gt;--exclude-if-present&lt;/code&gt; flag, which allows you to ignore a directory from being backed up, If it contains a certain &amp;lsquo;tag&amp;rsquo; file.&lt;/p&gt;

&lt;p&gt;So given the following directory structure, which we want to back up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ MyFiles
	+ dirA
		- file_one.pdf
		- file_two.pdf
	+ dirB
		- spreadsheet.xsl
		- image.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to ignore &lt;code&gt;dirB&lt;/code&gt; from being backed up by borg, we have to create a tag file in that directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd dirB
$ touch borg-ignore-dir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the tag file does not have to be named &lt;code&gt;borg-ignore-dir&lt;/code&gt;. You can name it however you like.&lt;/p&gt;

&lt;p&gt;Now we can run borg backup as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ borg create --exclude-if-present borg-ignore-dir ~/borgs/MyFiles::BackupName MyFiles/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only &lt;code&gt;dirA&lt;/code&gt; will be backed up.&lt;/p&gt;

&lt;p&gt;Useful Links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.borgbackup.org/&#34;&gt;BorgBackup Homepage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fin.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Tar Archiving Using Relative Paths</title>
      <link>https://www.usman.me.uk/2018/03/tar_relative_path/</link>
      <pubDate>Sat, 10 Mar 2018 15:40:39 &#43;0100</pubDate>
      <author>Usman Mahmood</author>
      <guid>https://www.usman.me.uk/2018/03/tar_relative_path/</guid>
      <description>&lt;p&gt;If you want to archive a directory (using the tar command), but not include the absolute path to the directory. You can use the &lt;strong&gt;-C&lt;/strong&gt; option to the tar command, which essentially cd&amp;rsquo;s into the directory and then archives it. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar czf /tmp/my_backup.tar.gz -C ~/home/coorp/my_files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When un-archived, the directory structure will be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;/some_path/my_files&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And not:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;/some_path/home/coorp/my_files&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fin.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Make &#39;echo %PATH&#39; More Readable</title>
      <link>https://www.usman.me.uk/2017/11/print-path-env-var/</link>
      <pubDate>Sat, 18 Nov 2017 14:34:22 &#43;0100</pubDate>
      <author>Usman Mahmood</author>
      <guid>https://www.usman.me.uk/2017/11/print-path-env-var/</guid>
      <description>&lt;p&gt;When you want to check the contents of your &lt;em&gt;$PATH&lt;/em&gt; variable. To see which directories are in your session, you run the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo $PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/opt/coreutils/libexec/gnubin:/usr/local/bin:/usr/local/sbin:/opt:/usr/local/go/bin:/usr/local/texlive/2015basic/bin/x86_64-darwin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/opt/coreutils/libexec/gnubin:/usr/local/sbin:/opt:/usr/local/go/bin:/usr/local/texlive/2015basic/bin/x86_64-darwin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is all well and good, but the output of the command can be hard to read if you have many directories in your path. What you want is a command that outputs the &lt;em&gt;$PATH&lt;/em&gt; variable in an easier to read format. Luckily, this can accomplished with a little bit of bash code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;path()
{
    p=$PATH;
    OIFS=&amp;quot;$IFS&amp;quot;;
    IFS=&#39;:&#39;;
    read -a paths &amp;lt;&amp;lt;&amp;lt; &amp;quot;${p}&amp;quot;;
    IFS=&amp;quot;$OIFS&amp;quot;;
    for i in &amp;quot;${paths[@]}&amp;quot;;
    do
        echo &amp;quot;- $i&amp;quot;;
    done
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if we run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- /usr/local/opt/coreutils/libexec/gnubin
- /usr/local/bin
- /usr/local/sbin
- /usr/local/go/bin
- /usr/local/texlive/2015basic/bin/x86_64-darwin
- /usr/local/bin
- /usr/bin
- /bin
- /usr/sbin
- /sbin
- /usr/local/opt/coreutils/libexec/gnubin
- /usr/local/sbin
- /opt
- /usr/local/go/bin
- /usr/local/texlive/2015basic/bin/x86_64-darwin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is much easier to read. And better, it still displays the original search order of the directories.&lt;/p&gt;

&lt;p&gt;Fin.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Piping Commands into Go Binaries</title>
      <link>https://www.usman.me.uk/2017/08/pipe-cmds-go/</link>
      <pubDate>Sun, 27 Aug 2017 18:31:37 BST</pubDate>
      <author>Usman Mahmood</author>
      <guid>https://www.usman.me.uk/2017/08/pipe-cmds-go/</guid>
      <description>&lt;p&gt;In this post we will see how we can pipe commands into our Go applications. We will write a basic command line program which demonstrates the functionality. Before we get started, it&amp;rsquo;s worth going over the basics of piping commands.&lt;/p&gt;

&lt;p&gt;The modular nature of the UNIX operating system. Allows the user to use basic commands to build up new commands. By allowing the output of one command to be used as the input for the next command. The general form of the pipe command is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;command1 | command2 | command3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, &lt;em&gt;command1&lt;/em&gt; is piping its output into &lt;em&gt;command2&lt;/em&gt;, which transforms the incoming data, and then pipes it into &lt;em&gt;command3&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls -l | grep &amp;quot;ninja&amp;quot; | less
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;who | sort
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;file * | grep text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Piping commands into your Go applications is quite easy. Thanks to the excellent standard library. We will write a very basic command line program &lt;em&gt;&amp;lsquo;change&amp;rsquo;&lt;/em&gt;. Which takes input, and replaces any occurrence of word A with  word B. Here is an example of the the command in action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;I hate Brussel sprouts!&amp;quot; | change &amp;quot;hate&amp;quot; &amp;quot;love&amp;quot;
I love Brussel sprouts!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Below is the code for the full program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// change.go
package main

import (
	&amp;quot;bytes&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;os&amp;quot;
)

func main() {
	buf := &amp;amp;bytes.Buffer{}
	n, err := io.Copy(buf, os.Stdin)
	if err != nil {
		log.Fatalln(err)
	} else if n &amp;lt;= 1 { // buffer always contains &#39;\n&#39;
		log.Fatalln(&amp;quot;no input provided&amp;quot;)
	}
	if len(os.Args) != 3 {
		log.Fatalln(&amp;quot;usage: echo \&amp;quot;hello world\&amp;quot; | change hello bye&amp;quot;)
	}
	oldWord := os.Args[1]
	newWord := os.Args[2]
	r := bytes.Replace(buf.Bytes(), []byte(oldWord), []byte(newWord), -1)
	fmt.Println(string(r))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ go build change.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: this code needs more work to make it more robust, if it were to be used in production. But it is okay for demonstration purposes.&lt;/p&gt;

&lt;p&gt;And that is how you pipe commands into your Go applications. Another command could pipe in the output of our command, as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;I hate hate Brussel sprouts!&amp;quot; | change &amp;quot;hate&amp;quot; &amp;quot;love&amp;quot; | grep -o love | wc -l
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope you enjoyed this blog post.&lt;/p&gt;

&lt;p&gt;Fin.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Sync.Pool is Drained During Garbage Collection</title>
      <link>https://www.usman.me.uk/2017/05/sync-pool-gc/</link>
      <pubDate>Tue, 23 May 2017 21:31:37 BST</pubDate>
      <author>Usman Mahmood</author>
      <guid>https://www.usman.me.uk/2017/05/sync-pool-gc/</guid>
      <description>&lt;p&gt;The Go sync.Pool type stores temporary objects, and provides get and put methods. Allowing you to cache allocated but unused items for later reuse. And relieving pressure on the garbage collector.&lt;/p&gt;

&lt;p&gt;The purpose of the sync.Pool type is to reuse memory between garbage collections. Which is why sync.Pool is drained during garbage collection (GC).&lt;/p&gt;

&lt;p&gt;Here is an example of how to use the sync pool:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;bytes&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;sync&amp;quot;
)

var bufPool = sync.Pool{
	New: func() interface{} {
		return new(bytes.Buffer)
	},
}

func main() {
	b := bufPool.Get().(*bytes.Buffer)
	b.WriteString(&amp;quot;What is past is prologue.&amp;quot;)
	bufPool.Put(b)
	b = bufPool.Get().(*bytes.Buffer)
	fmt.Println(b.String())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;What is past is prologue.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When calling &amp;lsquo;bufpool.Get&amp;rsquo; it is not guaranteed that we will get a specific buffer from the pool. The &amp;lsquo;Get&amp;rsquo; method selects a random buffer from the pool, removes it from the pool and then returns it to the caller.&lt;/p&gt;

&lt;p&gt;As stated before, the interesting thing to note when using sync.Pool, is that it is drained &lt;strong&gt;during&lt;/strong&gt; GC. That is, all the objects within the pool are removed. Lets look at an example of this in action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
    b := bufPool.Get().(*bytes.Buffer)
	b.WriteString(&amp;quot;What is past is prologue.&amp;quot;)
	bufPool.Put(b)
	
	// never actually call runtime.GC() in your program :)
	runtime.GC() 
	
	b = bufPool.Get().(*bytes.Buffer)
	fmt.Println(b.String())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The program will no longer output &amp;ldquo;What is past is prologue.&amp;rdquo; because the call to runtime.GC() drained &amp;lsquo;bufpool&amp;rsquo;. And when we make the call to &amp;lsquo;bufPool.Get()&amp;rsquo;, we get a brand new buffer and not a recycled one.&lt;/p&gt;

&lt;p&gt;If we look at the Go source code repository on Github. We see that within the file mgc.go, the &lt;a href=&#34;https://github.com/golang/go/blob/3b5637ff2bd5c03479780995e7a35c48222157c1/src/runtime/mgc.go#L1190&#34;&gt;gcStart&lt;/a&gt; function makes a call to the function &lt;a href=&#34;https://github.com/golang/go/blob/3b5637ff2bd5c03479780995e7a35c48222157c1/src/runtime/mgc.go#L2046&#34;&gt;clearpools&lt;/a&gt;. This function drains all the sync.Pool types.&lt;/p&gt;

&lt;p&gt;There are other techniques that can be used to drain the sync pool, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sometime before a GC&lt;/li&gt;
&lt;li&gt;Sometime after a GC&lt;/li&gt;
&lt;li&gt;Clock based&lt;/li&gt;
&lt;li&gt;Using weak references/pointers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these techniques have their advantages and disadvantages. However, Draining the pool during a GC is a good technique as it is simple and does not circumvent the garbage collector.&lt;/p&gt;

&lt;p&gt;Fin.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Access Raspberry Pi Externally using ngrok</title>
      <link>https://www.usman.me.uk/2017/02/external-access-pi-ngrok/</link>
      <pubDate>Sun, 26 Feb 2017 00:15:59 UTC</pubDate>
      <author>Usman Mahmood</author>
      <guid>https://www.usman.me.uk/2017/02/external-access-pi-ngrok/</guid>
      <description>

&lt;p&gt;In this blog post we will set up our Raspberry Pi so it will accessed using SSH from outside our home network. Below is a diagram of the architecture:&lt;/p&gt;

&lt;p&gt;[ Home Network : Raspberry Pi ] &amp;lt;&amp;ndash; [ ngrok ] &amp;ndash;&amp;gt; [ External Network ]&lt;/p&gt;

&lt;p&gt;From our home network we will create a secure tunnel, through ngrok. Which we will then connect to from our external network. This will allow us to SSH into our Raspberry Pi, and manage it.&lt;/p&gt;

&lt;h5 id=&#34;what-is-ngrok&#34;&gt;What is ngrok?&lt;/h5&gt;

&lt;p&gt;ngrok is a fantastic tool which allows you to create secure tunnels to localhost. So you can do things like expose a local server behind a NAT or firewall to the internet. See the &lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok&lt;/a&gt; homepage for more information.&lt;/p&gt;

&lt;p&gt;Lets get started!&lt;/p&gt;

&lt;h4 id=&#34;step-1-enable-passwordless-ssh-access&#34;&gt;Step 1: Enable Passwordless SSH Access&lt;/h4&gt;

&lt;p&gt;You need to configure your Pi for SSH access. Follow the steps described in the following link (very carefully):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/remote-access/ssh/passwordless.md&#34;&gt;Passwordless SSH Access - raspberrypi.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the end, you should be able to type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh USER@Pi-IP-ADDRESS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And connect to your Raspberry Pi without a password prompt. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh pi@192.168.0.42

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sat Feb 25 20:24:30 2017 from 192.168.0.42

pi@raspberrypi ~ $ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No prompt for a password.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the computer you generated the SSH keys on (and copied to the Pi). Is the computer you will be using to connect to your Pi, from the external network.&lt;/p&gt;

&lt;h4 id=&#34;step-2-install-ngrok-on-your-raspberry-pi&#34;&gt;Step 2: Install ngrok on your Raspberry Pi&lt;/h4&gt;

&lt;p&gt;Go &lt;a href=&#34;https://ngrok.com/download&#34;&gt;here&lt;/a&gt; and follow the instructions to install ngrok on your Pi.&lt;/p&gt;

&lt;h4 id=&#34;step-3-run-ngrok-on-your-raspberry-pi&#34;&gt;Step 3: Run ngrok on your Raspberry Pi&lt;/h4&gt;

&lt;p&gt;Run ngrok with the following options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pi@raspberrypi ~ $ ngrok tcp 22
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;step-4-copy-ngrok-host-and-port&#34;&gt;Step 4: Copy ngrok Host and Port&lt;/h4&gt;

&lt;p&gt;Once ngrok starts, it will display a &lt;em&gt;tcp://&lt;/em&gt; address on the forwarding line, for example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Forwarding tcp://123xyz0.tcp.ngrok.io:17684 -&amp;gt; localhost:22&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Copy the host name &lt;em&gt;123xyz0.tcp.ngrok.io&lt;/em&gt; and the port &lt;em&gt;17684&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the host name and port will be different for you.&lt;/p&gt;

&lt;h4 id=&#34;step-5-edit-ssh-config-file&#34;&gt;Step 5: Edit SSH config file&lt;/h4&gt;

&lt;p&gt;In step one you generated some ssh keys on your computer, and then copied them to the raspberry Pi. On the computer you generated the SSH keys on, add the following details to &lt;em&gt;~/.ssh/config&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host ngrok
        HostName 123xyz.tcp.ngrok.io
        IdentityFile ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, the host name will be different for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: we are using the same key we copied over to the Pi in step one, you can generate new SSH keys if you like.&lt;/p&gt;

&lt;h4 id=&#34;step-6-access-the-raspberry-pi-from-outside-your-network&#34;&gt;Step 6: Access the Raspberry Pi from outside your network&lt;/h4&gt;

&lt;p&gt;Now with your computer &lt;strong&gt;not&lt;/strong&gt; connected to your home network, type the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh pi@ngrok -p 17684
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the username and port to match yours.&lt;/p&gt;

&lt;p&gt;You should now be connected to your Raspberry Pi using SSH through ngrok.&lt;/p&gt;

&lt;p&gt;Fin.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Raspberry Pi Slow SSH Fix</title>
      <link>https://www.usman.me.uk/2017/02/pi-slow-ssh-fix/</link>
      <pubDate>Mon, 20 Feb 2017 21:42:26 UTC</pubDate>
      <author>Usman Mahmood</author>
      <guid>https://www.usman.me.uk/2017/02/pi-slow-ssh-fix/</guid>
      <description>&lt;p&gt;If you SSH into your Raspberry Pi and have noticed a lag when typing characters into the terminal. Then the following fix may get rid of the lag (it worked for me!).&lt;/p&gt;

&lt;p&gt;Log into your Raspberry Pi and type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo nano /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the bottom of the config file add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UseDns no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the file, then restart sshd:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ service ssh restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or better, reboot your Raspberry Pi:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SSH&amp;rsquo;ing into your Raspberry Pi should no longer be slow after these steps. ðŸ¤ž&lt;/p&gt;

&lt;p&gt;Fin.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Runtime and User Level Panics in Go</title>
      <link>https://www.usman.me.uk/2016/12/runtime-user-panics/</link>
      <pubDate>Thu, 08 Dec 2016 17:12:39 UTC</pubDate>
      <author>Usman Mahmood</author>
      <guid>https://www.usman.me.uk/2016/12/runtime-user-panics/</guid>
      <description>&lt;p&gt;How can our application code detect the difference between a runtime panic and a user level panic? Before answering this question. Let&amp;rsquo;s take a look at the difference between a runtime panic, and user level panic.&lt;/p&gt;

&lt;p&gt;A runtime panic is one thrown by the Go runtime, there are many things that can trigger a runtime panic. An example of the the most common runtime panic would be attempting to index an array out of bounds. The Go runtime would detect the illegal access and call the built-in panic function.&lt;/p&gt;

&lt;p&gt;A user level panic would be were code outside the runtime i.e. your code, 3rd partly library, etc&amp;hellip; makes a call to the built-in panic function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;panic(&amp;quot;he&#39;s dead jim&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Go 1.7 a change was made to the panic values thrown by the runtime. From the &lt;a href=&#34;https://golang.org/doc/go1.7#runtime&#34;&gt;1.7 release notes &lt;/a&gt; it states:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All panics started by the runtime now use panic values that implement both the builtin error, and runtime.Error, as required by the language specification.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When the runtime throws a panic it will call the built-in panic function. With a value which implements the &lt;em&gt;runtime.Error&lt;/em&gt; interface. When user level code calls the built-in panic function. It will provide a value which does not implement the &lt;em&gt;runtime.Error&lt;/em&gt; interface.&lt;/p&gt;

&lt;p&gt;Lets look at a code example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;errors&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;runtime&amp;quot;
)

func runtimePanic() {
	var a []int
	// index out of range, will trigger a runtime panic
	b := a[99]
	_ = b
}

func nonRuntimePanic() {
	panic(errors.New(&amp;quot;:(&amp;quot;))
}

func main() {
	defer func() {
		if x := recover(); x != nil {
			if _, ok := x.(runtime.Error); ok {
				fmt.Println(&amp;quot;this is a runtime panic error&amp;quot;)
			} else {
				fmt.Println(&amp;quot;this is a non-runtime panic error&amp;quot;)
			}
		}
	}()
	// nonRuntimePanic()
	runtimePanic()
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our defer closure we call the built-in recover function. And then use the return value, to see if the type satisfies the &lt;em&gt;runtime.Error&lt;/em&gt; interface.&lt;/p&gt;

&lt;p&gt;If we run this code, we will get the output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this is a runtime panic error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we uncomment the call to &lt;em&gt;nonRuntimePanic&lt;/em&gt;, and then run the code again, we will get the output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this is a non-runtime panic error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can distinguish between runtime and user level panics. This information may be useful if your are determining whether to rescue your application from a panic, or to let it crash.&lt;/p&gt;

&lt;p&gt;Useful links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/runtime/#Error&#34;&gt;runtime.Error Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/ref/spec#Run_time_panics&#34;&gt;Run-time panics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/go1.7#runtime&#34;&gt;Go 1.7 Release Notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fin.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Creating Empty Git Commits</title>
      <link>https://www.usman.me.uk/2016/11/git-empty-commit/</link>
      <pubDate>Tue, 29 Nov 2016 00:43:13 UTC</pubDate>
      <author>Usman Mahmood</author>
      <guid>https://www.usman.me.uk/2016/11/git-empty-commit/</guid>
      <description>

&lt;p&gt;You may not know it, but Git allows you to create an empty commit in to your repo. It doesn&amp;rsquo;t like it, but you can do it any way.&lt;/p&gt;

&lt;p&gt;An empty commit is one where you don&amp;rsquo;t actually commit any code changes i.e. if you &lt;em&gt;git status&lt;/em&gt; your repo, you get the message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;On branch master
nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why would you want to create an empty commit? You may want to communicate changes, which have nothing to do with code. But you have updated something that you want the rest of the team to know about. And you feel that communicating this via the git log make sense.&lt;/p&gt;

&lt;h4 id=&#34;creating-an-empty-commit&#34;&gt;Creating an empty commit&lt;/h4&gt;

&lt;p&gt;Start by creating a repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir test 
$ cd test 
$ git init 
$ echo &amp;quot;hello world&amp;quot; &amp;gt;&amp;gt; hello.txt 
$ git add hello.txt 
$ git commit -m &amp;quot;initial commit&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have a repo with one commit and nothing else to commit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git status
On branch master
nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now use the &lt;em&gt;&amp;ndash;allow-empty&lt;/em&gt; flag to insert an empty commit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit -m &amp;quot;this is an empty commit&amp;quot; --allow-empty
[master 02cdd7f] this is an empty commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets see what the git log looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git log
commit 02cdd7f74c0fe4219a061e94066251dbf1137475
Author: Philip J. Fry &amp;lt;fry@planet-express.com&amp;gt; 
Date:   Thu Dec 01 21:24:28 2016 +0000

    this is an empty commit

commit f503c2ccf476b144f69108a842782464dd3ca61e
Author: Philip J. Fry &amp;lt;fry@planet-express.com&amp;gt; 
Date:   Thu Dec 01 21:15:40 2016 +0000

    initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also create an empty commit with an empty commit message. Using the &lt;em&gt;&amp;ndash;allow-empty-message&lt;/em&gt; flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit --allow-empty-message --allow-empty
[master 8546295]

$ git log
commit 85462959fedf63fd4a59c578caccef4df8cceff8
Author: Philip J. Fry &amp;lt;fry@planet-express.com&amp;gt; 
Date:   Thu Dec 01 21:57:47 2016 +0000

commit 02cdd7f74c0fe4219a061e94066251dbf1137475
Author: Philip J. Fry &amp;lt;fry@planet-express.com&amp;gt; 
Date:   Thu Dec 01 21:24:28 2016 +0000

    this is an empty commit

commit f503c2ccf476b144f69108a842782464dd3ca61e
Author: Philip J. Fry &amp;lt;fry@planet-express.com&amp;gt; 
Date:   Thu Dec 01 21:15:40 2016 +0000

    initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thats it! if you want to read more about the flags discussed go &lt;a href=&#34;https://git-scm.com/docs/git-commit#git-commit---allow-empty&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fin.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Changing the Date of Git Commits</title>
      <link>https://www.usman.me.uk/2016/11/git-commit-change-date/</link>
      <pubDate>Tue, 15 Nov 2016 19:29:07 UTC</pubDate>
      <author>Usman Mahmood</author>
      <guid>https://www.usman.me.uk/2016/11/git-commit-change-date/</guid>
      <description>&lt;p&gt;Have you ever looked at peoples Github contribution timelines and seen a word or some ASCII art. This is done by creating a repo, then manipulating the dates of commits, to create the desired design.&lt;/p&gt;

&lt;p&gt;This blog post is not about creating funky pieces of art in your Github commit history timeline. But instead, shows you how to change the date of a commit using Git.&lt;/p&gt;

&lt;p&gt;When you make a git commit you can actually set the date of the commit to anything you want. Lets get started.&lt;/p&gt;

&lt;p&gt;First, you have to set two environment variables - &lt;em&gt;GIT_AUTHOR_DATE&lt;/em&gt; and &lt;em&gt;GIT_COMMITTER_DATE&lt;/em&gt;, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export GIT_AUTHOR_DATE=&amp;quot;Wed Jan 10 14:00 2099 +0100&amp;quot;
$ export GIT_COMMITTER_DATE=&amp;quot;Wed Jan 10 14:00 2099 +0100&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a git repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir test
$ cd test
$ git init
$ echo &amp;quot;hello world&amp;quot; &amp;gt;&amp;gt; hello.txt
$ git add hello.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets commit our changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit -m &amp;quot;initial commit&amp;quot;
$ git log
commit 80b2d1f499d6ae455a4f87f68e107b275abfefe8
Author: Philip J. Fry &amp;lt;fry@planet-express.com&amp;gt;
Date:   Wed Jan 10 14:00:00 2099 +0100

    initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the date of our commit has changed, rather the being the current date/time, it is set to day in the year 2099.&lt;/p&gt;

&lt;p&gt;If you want to change the date of a commit in the past, I recommend reading this &lt;a href=&#34;http://eddmann.com/posts/changing-the-timestamp-of-a-previous-git-commit/&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Useful links:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/docs/git-commit#_date_formats&#34;&gt;Git commit date formats&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://eddmann.com/posts/changing-the-timestamp-of-a-previous-git-commit/&#34;&gt;Changing the timestamp of a previous Git commit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gelstudios/gitfiti&#34;&gt;gitfiti - abusing github commit history for the lulz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fin.&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>