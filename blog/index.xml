<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Usman Mahmood</title>
    <link>https://www.usman.me.uk/blog/</link>
    <description>Recent content in Blogs on Usman Mahmood</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Usman Mahmood</copyright>
    <lastBuildDate>Mon, 23 Mar 2020 22:11:03 +0100</lastBuildDate>
    
	<atom:link href="https://www.usman.me.uk/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Secure Tunnels with WireGuard</title>
      <link>https://www.usman.me.uk/2020/03/wireguard/</link>
      <pubDate>Mon, 23 Mar 2020 22:11:03 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2020/03/wireguard/</guid>
      <description>Wireguard is a secure networking tunnel, it can be used for VPNs, connecting data centers together over the Internet, or any place where you need to connect two or more networks together in a secure way.
Wireguard is open source and it is designed to be much simpler to configure than other tools such as OpenVPN or IPSec.
Below, we are going to connect two computers together:
Machine A IP address 192.</description>
    </item>
    
    <item>
      <title>Configuring Remote Connections with PostgreSQL</title>
      <link>https://www.usman.me.uk/2020/02/conn-postgres/</link>
      <pubDate>Thu, 13 Feb 2020 19:15:15 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2020/02/conn-postgres/</guid>
      <description>If you need to access your PostgreSQL database from another machine, you need to edit the configuration, to make the database listen to incoming connections from other hosts. Below are the steps on how to do this.
Note: Do not do this on your production database environment, It will open up a potential security flaw. This should be fine to do on your staging environment for testing purposes.
On the machine running PostgreSQL, locate configuration file postgres.</description>
    </item>
    
    <item>
      <title>Compiling OpenVPN on the Raspberry Pi 3</title>
      <link>https://www.usman.me.uk/2019/12/compile-openvpn/</link>
      <pubDate>Sun, 15 Dec 2019 14:41:12 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2019/12/compile-openvpn/</guid>
      <description>Recently I needed to upgrade the version of OpenVPN on my Raspberry Pi 3 Model B. Below are the steps needed to do this, here we upgrade to OpenVPN version 2.4.8.
$ cd /tmp $ wget https://swupdate.openvpn.org/community/releases/openvpn-2.4.8.tar.gz $ tar xf openvpn-2.4.8.tar.gz $ cd openvpn-2.4.8/ $ sudo apt-get install libssl-dev $ sudo apt-get install liblzo2-dev $ sudo apt-get install libpam0g-dev $ ./configure --prefix=/usr $ sudo make $ sudo make install  Verify that the new version installed:</description>
    </item>
    
    <item>
      <title>Styling Markers on Mapbox Static Maps</title>
      <link>https://www.usman.me.uk/2019/10/styling-markers-mapbox/</link>
      <pubDate>Sat, 05 Oct 2019 16:12:46 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2019/10/styling-markers-mapbox/</guid>
      <description>Recently I was using the python map-box api to generate static maps. I needed to style the markers which pin pointed locations on the map. I found it difficult to find the necessary documentation on how to do this. In the end it simply involved adding the following fields:
 maker-colour (hex value). marker-symbol (Maki icon name. an integer, or a lowercase letter). marker-size (small, large).  To the JSON like so:</description>
    </item>
    
    <item>
      <title>Ignoring Directories When Backing up with Borg</title>
      <link>https://www.usman.me.uk/2018/09/borg-ignore/</link>
      <pubDate>Fri, 14 Sep 2018 20:36:32 +0000</pubDate>
      
      <guid>https://www.usman.me.uk/2018/09/borg-ignore/</guid>
      <description>Borg backup has a --exclude-if-present flag, which allows you to ignore a directory from being backed up, If it contains a certain &amp;lsquo;tag&amp;rsquo; file.
So given the following directory structure, which we want to back up:
+ MyFiles + dirA - file_one.pdf - file_two.pdf + dirB - spreadsheet.xsl - image.png  If we want to ignore dirB from being backed up by borg, we have to create a tag file in that directory:</description>
    </item>
    
    <item>
      <title>Tar Archiving Using Relative Paths</title>
      <link>https://www.usman.me.uk/2018/03/tar_relative_path/</link>
      <pubDate>Sat, 10 Mar 2018 15:40:39 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2018/03/tar_relative_path/</guid>
      <description>If you want to archive a directory (using the tar command), but not include the absolute path to the directory. You can use the -C option to the tar command, which essentially cd&amp;rsquo;s into the directory and then archives it. Here is an example:
$ tar czf /tmp/my_backup.tar.gz -C ~/home/coorp/my_files  When un-archived, the directory structure will be:
 /some_path/my_files  And not:
 /some_path/home/coorp/my_files.  Fin.</description>
    </item>
    
    <item>
      <title>Make &#39;echo %PATH&#39; More Readable</title>
      <link>https://www.usman.me.uk/2017/11/print-path-env-var/</link>
      <pubDate>Sat, 18 Nov 2017 14:34:22 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2017/11/print-path-env-var/</guid>
      <description>When you want to check the contents of your $PATH variable. To see which directories are in your session, you run the command:
$ echo $PATH  Output:
/usr/local/opt/coreutils/libexec/gnubin:/usr/local/bin:/usr/local/sbin:/opt:/usr/local/go/bin:/usr/local/texlive/2015basic/bin/x86_64-darwin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/opt/coreutils/libexec/gnubin:/usr/local/sbin:/opt:/usr/local/go/bin:/usr/local/texlive/2015basic/bin/x86_64-darwin  This is all well and good, but the output of the command can be hard to read if you have many directories in your path. What you want is a command that outputs the $PATH variable in an easier to read format.</description>
    </item>
    
    <item>
      <title>Piping Commands into Go Binaries</title>
      <link>https://www.usman.me.uk/2017/08/pipe-cmds-go/</link>
      <pubDate>Sun, 27 Aug 2017 18:31:37 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2017/08/pipe-cmds-go/</guid>
      <description>In this post we will see how we can pipe commands into our Go applications. We will write a basic command line program which demonstrates the functionality. Before we get started, it&amp;rsquo;s worth going over the basics of piping commands.
The modular nature of the UNIX operating system. Allows the user to use basic commands to build up new commands. By allowing the output of one command to be used as the input for the next command.</description>
    </item>
    
    <item>
      <title>Sync.Pool is Drained During Garbage Collection</title>
      <link>https://www.usman.me.uk/2017/05/sync-pool-gc/</link>
      <pubDate>Tue, 23 May 2017 21:31:37 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2017/05/sync-pool-gc/</guid>
      <description>The Go sync.Pool type stores temporary objects, and provides get and put methods. Allowing you to cache allocated but unused items for later reuse. And relieving pressure on the garbage collector.
The purpose of the sync.Pool type is to reuse memory between garbage collections. Which is why sync.Pool is drained during garbage collection (GC).
Here is an example of how to use the sync pool:
package main import ( &amp;quot;bytes&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; ) var bufPool = sync.</description>
    </item>
    
    <item>
      <title>Access Raspberry Pi Externally using ngrok</title>
      <link>https://www.usman.me.uk/2017/02/external-access-pi-ngrok/</link>
      <pubDate>Sun, 26 Feb 2017 00:15:59 +0000</pubDate>
      
      <guid>https://www.usman.me.uk/2017/02/external-access-pi-ngrok/</guid>
      <description>In this blog post we will set up our Raspberry Pi so it will accessed using SSH from outside our home network. Below is a diagram of the architecture:
[ Home Network : Raspberry Pi ] &amp;lt;&amp;ndash; [ ngrok ] &amp;ndash;&amp;gt; [ External Network ]
From our home network we will create a secure tunnel, through ngrok. Which we will then connect to from our external network. This will allow us to SSH into our Raspberry Pi, and manage it.</description>
    </item>
    
    <item>
      <title>Raspberry Pi Slow SSH Fix</title>
      <link>https://www.usman.me.uk/2017/02/pi-slow-ssh-fix/</link>
      <pubDate>Mon, 20 Feb 2017 21:42:26 +0000</pubDate>
      
      <guid>https://www.usman.me.uk/2017/02/pi-slow-ssh-fix/</guid>
      <description>If you SSH into your Raspberry Pi and have noticed a lag when typing characters into the terminal. Then the following fix may get rid of the lag (it worked for me!).
Log into your Raspberry Pi and type:
$ sudo nano /etc/ssh/sshd_config  At the bottom of the config file add:
UseDns no  Save the file, then restart sshd:
$ service ssh restart  Or better, reboot your Raspberry Pi:</description>
    </item>
    
    <item>
      <title>Runtime and User Level Panics in Go</title>
      <link>https://www.usman.me.uk/2016/12/runtime-user-panics/</link>
      <pubDate>Thu, 08 Dec 2016 17:12:39 +0000</pubDate>
      
      <guid>https://www.usman.me.uk/2016/12/runtime-user-panics/</guid>
      <description>How can our application code detect the difference between a runtime panic and a user level panic? Before answering this question. Let&amp;rsquo;s take a look at the difference between a runtime panic, and user level panic.
A runtime panic is one thrown by the Go runtime, there are many things that can trigger a runtime panic. An example of the the most common runtime panic would be attempting to index an array out of bounds.</description>
    </item>
    
    <item>
      <title>Creating Empty Git Commits</title>
      <link>https://www.usman.me.uk/2016/11/git-empty-commit/</link>
      <pubDate>Tue, 29 Nov 2016 00:43:13 +0000</pubDate>
      
      <guid>https://www.usman.me.uk/2016/11/git-empty-commit/</guid>
      <description>You may not know it, but Git allows you to create an empty commit in to your repo. It doesn&amp;rsquo;t like it, but you can do it any way.
An empty commit is one where you don&amp;rsquo;t actually commit any code changes i.e. if you git status your repo, you get the message:
On branch master nothing to commit, working tree clean  Why would you want to create an empty commit?</description>
    </item>
    
    <item>
      <title>Changing the Date of Git Commits</title>
      <link>https://www.usman.me.uk/2016/11/git-commit-change-date/</link>
      <pubDate>Tue, 15 Nov 2016 19:29:07 +0000</pubDate>
      
      <guid>https://www.usman.me.uk/2016/11/git-commit-change-date/</guid>
      <description>Have you ever looked at peoples Github contribution timelines and seen a word or some ASCII art. This is done by creating a repo, then manipulating the dates of commits, to create the desired design.
This blog post is not about creating funky pieces of art in your Github commit history timeline. But instead, shows you how to change the date of a commit using Git.
When you make a git commit you can actually set the date of the commit to anything you want.</description>
    </item>
    
    <item>
      <title>Using Subtests and Sub-benchmarks in Go</title>
      <link>https://www.usman.me.uk/2016/10/using-sub-tests-benchmarks/</link>
      <pubDate>Sat, 22 Oct 2016 21:45:22 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2016/10/using-sub-tests-benchmarks/</guid>
      <description>In this post we will walk through an example of how to use the new subtests and sub-benchmarks functionality introduced in Go 1.7.
Subtests One of the nifty features in Go is the ability to write table driven tests. For example, if we wanted to test the function:
func Double(n int) int { return n * 2 }  Then we could write a table driven test as follows:</description>
    </item>
    
    <item>
      <title>SVG Sprites</title>
      <link>https://www.usman.me.uk/2016/08/svg-sprites/</link>
      <pubDate>Tue, 16 Aug 2016 19:54:44 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2016/08/svg-sprites/</guid>
      <description>Within an single SVG file we can define many sprites. This consists of merging all your SVG sprites into a single .svg image file. Every sprite is wrapped in a &amp;lsquo;symbol&amp;rsquo; tag, like this:
&amp;lt;svg class=&amp;quot;character&amp;quot; width=&amp;quot;100pt&amp;quot; height=&amp;quot;100pt&amp;quot; version=&amp;quot;1.1&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot;&amp;gt; &amp;lt;symbol id=&amp;quot;circle-red&amp;quot; viewBox=&amp;quot;0 0 100 100&amp;quot;&amp;gt; &amp;lt;circle cx=&amp;quot;50&amp;quot; cy=&amp;quot;50&amp;quot; r=&amp;quot;40&amp;quot; stroke=&amp;quot;black&amp;quot; stroke-width=&amp;quot;3&amp;quot; fill=&amp;quot;red&amp;quot; /&amp;gt; &amp;lt;/symbol&amp;gt; &amp;lt;symbol id=&amp;quot;circle-black&amp;quot; viewBox=&amp;quot;0 0 100 100&amp;quot;&amp;gt; &amp;lt;circle cx=&amp;quot;50&amp;quot; cy=&amp;quot;50&amp;quot; r=&amp;quot;40&amp;quot; stroke=&amp;quot;black&amp;quot; stroke-width=&amp;quot;3&amp;quot; /&amp;gt; &amp;lt;/symbol&amp;gt; &amp;lt;/svg&amp;gt;  We can then use HTML or CSS to pick out each part of the image:</description>
    </item>
    
    <item>
      <title>Updating Third Party Packages in Go</title>
      <link>https://www.usman.me.uk/2016/06/update_packages/</link>
      <pubDate>Sat, 11 Jun 2016 14:43:49 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2016/06/update_packages/</guid>
      <description>Just a short post on how to update packages using go get.
To update all third party packages in your GOPATH use the following command:
 go get -u all
 To update a specific package, just provide the full package name to go get:
 go get -u github.com/gorilla/mux
 What about vendor-ed packages? These are updated in exactly the same way as above:
 go get -u my-project/vendor/megacorp/foo</description>
    </item>
    
    <item>
      <title>sort.Sort &amp; sort.Stable</title>
      <link>https://www.usman.me.uk/2016/03/sort-stable/</link>
      <pubDate>Sun, 13 Mar 2016 19:34:13 +0000</pubDate>
      
      <guid>https://www.usman.me.uk/2016/03/sort-stable/</guid>
      <description>Go 1.6 made improvements to the Sort function in the sort package. It was improved to make fewer calls to the Less and Swap methods. Here are some benchmarks showing the performance of sort.Sort in Go 1.5 vs 1.6:
Sort []int with Go 1.5 BenchmarkSort_1-4 20000000 67.2 ns/op BenchmarkSort_10-4 10000000 227 ns/op BenchmarkSort_100-4 500000 3863 ns/op BenchmarkSort_1000-4 30000 52189 ns/op Sort []int with Go 1.6 BenchmarkSort_1-4 20000000 64.7 ns/op BenchmarkSort_10-4 10000000 137 ns/op BenchmarkSort_100-4 500000 2849 ns/op BenchmarkSort_1000-4 30000 46949 ns/op  source: state of go</description>
    </item>
    
    <item>
      <title>The Defer Statement</title>
      <link>https://www.usman.me.uk/2015/12/defer-statement/</link>
      <pubDate>Mon, 14 Dec 2015 20:55:08 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2015/12/defer-statement/</guid>
      <description>The Go programming language has a defer statement that allows for a function call to be run just before the currently running function returns. Here is how the defer statement is explained in the language specification:
&amp;ldquo;A &amp;ldquo;defer&amp;rdquo; statement invokes a function whose execution is deferred to the moment the surrounding function returns, either because the surrounding function executed a return statement, reached the end of its function body, or because the corresponding goroutine is panicking.</description>
    </item>
    
    <item>
      <title>Go Channel Axioms</title>
      <link>https://www.usman.me.uk/2015/12/channel-axioms/</link>
      <pubDate>Mon, 14 Dec 2015 01:40:39 +0000</pubDate>
      
      <guid>https://www.usman.me.uk/2015/12/channel-axioms/</guid>
      <description>A while ago I was watching a tech talk by Blake Caldwell on Building Resilient Services with Go. In his presentation he had a slide which listed go channel axioms. I have listed his channel axioms here and provided some short code snippets to hopefully clarify them.
A send to a nil channel blocks forever var ch chan bool ch &amp;lt;- true // will always block  We declare a channel &amp;lsquo;ch&amp;rsquo; but do not initialize it (with make), so it is a nil channel.</description>
    </item>
    
    <item>
      <title>dotGo 2015</title>
      <link>https://www.usman.me.uk/2015/11/dotgo-eu-2015/</link>
      <pubDate>Thu, 12 Nov 2015 13:15:12 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2015/11/dotgo-eu-2015/</guid>
      <description>On Monday the 9th of November I was in Paris attending dotGo, the European Go conference. This blog post is a summary of my time there.
Pre-Conference The day before the conference, the Paris tech talks group organized a pre-conference meetup/party. There were a large number of delegates who turned up and the meet up consisted of about six or seven talks. The talks were about how individuals at there respective companies were using Go.</description>
    </item>
    
    <item>
      <title>tmux Cross Platform Config.</title>
      <link>https://www.usman.me.uk/2015/10/tmux-cross-platform/</link>
      <pubDate>Tue, 20 Oct 2015 17:15:08 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2015/10/tmux-cross-platform/</guid>
      <description>If like me you use tmux on both Linux and OS X, then managing your tmux configuration can be a pain. The problem is there is configuration that is specific to either OS, such as copy and paste behavior. This blog post will show you how to manage your tmux configuration across platforms in a better way.
The first thing you want to do is create a dot file for each platform, so for Linux create .</description>
    </item>
    
    <item>
      <title>Things to do before committing Go code</title>
      <link>https://www.usman.me.uk/2015/09/go-todo/</link>
      <pubDate>Wed, 02 Sep 2015 18:22:06 +0700</pubDate>
      
      <guid>https://www.usman.me.uk/2015/09/go-todo/</guid>
      <description>This blog post will list some of the basic things you should really do before committing Go code into your repository.
1) Run gofmt/goimports
gofmt is probably the most popular Go tool amongst gophers. The job of gofmt is to format Go packages, your code will be formatted to be consistent across your code base. For example if we have the following if statement:
if x == 42 { fmt.Println(&amp;quot;The answer to everything&amp;quot;) }  Then running gofmt on this will format the code to:</description>
    </item>
    
    <item>
      <title>Golang UK Conference 2015</title>
      <link>https://www.usman.me.uk/2015/08/golang-uk-conf-2015/</link>
      <pubDate>Tue, 25 Aug 2015 22:09:24 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2015/08/golang-uk-conf-2015/</guid>
      <description>On Friday the 21st of August I attended the Golang UK conference 2015 held at the amazing Brewery in London. This post is a short write up of my time at the conference.
This was my first ever conference so apart from the talks, I did not know what else to expect. Overall though, I found the conference was excellent and I met a wide range of interesting people.</description>
    </item>
    
    <item>
      <title>Gofmt and Rewrite Rules</title>
      <link>https://www.usman.me.uk/2015/08/gofmt-rewrite-rules/</link>
      <pubDate>Tue, 04 Aug 2015 23:26:39 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2015/08/gofmt-rewrite-rules/</guid>
      <description>One thing I absolutely love about Go is its tooling support. Whenever I use the numerous tools I always discover something new. In this short post I will be showing off gofmt&amp;rsquo;s -r flag, this flag allows you to apply a rewrite rule to your source before formatting.
A rewrite rule is a string in the following format:
pattern -&amp;gt; replacement  Both pattern and replacement must be valid Go expressions (more on this later), lets apply a simple rewrite to the following code:</description>
    </item>
    
    <item>
      <title>Go and String Concatenation</title>
      <link>https://www.usman.me.uk/2015/07/go-string-concat/</link>
      <pubDate>Sun, 26 Jul 2015 18:45:28 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2015/07/go-string-concat/</guid>
      <description>When writing Go code you should try to stay away from concatenating strings using the &amp;lsquo;+&amp;rsquo; and &amp;lsquo;+=&amp;rdquo; operators.
Strings in Go, like many other languages (Java, C#, etc&amp;hellip;) are immutable, this means after a string has been created it is impossible to change. Here is what the Go Programming Language Specification has to say about the string type:
&amp;ldquo;A string type represents the set of string values. A string value is a (possibly empty) sequence of bytes.</description>
    </item>
    
    <item>
      <title>Calling C from Go</title>
      <link>https://www.usman.me.uk/2015/07/calling-c-from-go/</link>
      <pubDate>Sat, 25 Jul 2015 20:18:15 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2015/07/calling-c-from-go/</guid>
      <description>This post will show you the basics of how to call C code from a Go package.
Lets get started with an example:
Create a header file &amp;ldquo;add.h&amp;rdquo; with a function prototype:
#ifndef _ADD_H_ #define _ADD_H_ int add(int, int); #endif  Create the source file &amp;ldquo;add.c&amp;rdquo; containing the definition for add:
#include &amp;quot;add.h&amp;quot; int add(int a, int b) { return a + b; }  Create a Go package &amp;ldquo;main.</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://www.usman.me.uk/2015/07/first/</link>
      <pubDate>Sat, 25 Jul 2015 17:15:08 +0100</pubDate>
      
      <guid>https://www.usman.me.uk/2015/07/first/</guid>
      <description>This is my blog. There are many like it, but this one is mine.</description>
    </item>
    
  </channel>
</rss>